Building DAG of jobs...
Using shell: /usr/bin/bash
Provided cores: 2
Rules claiming more threads will be scaled down.
Job stats:
job                   count
------------------  -------
Sparta_collapse           1
Sparta_endtime            1
all                       1
endCutNormalize_sh        1
endCutSparta_sh        1000
endCutStep1WIN1_sh        1
endCutStep1WIN2_sh        1
endCutStep2_sh            1
total                  1007

Select jobs to execute...

[Sun Jan 21 23:36:31 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.646.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.646.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2176
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.646.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.646.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:36:31 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.646.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f52df85b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    239 (40.72%) aligned 0 times
    158 (26.92%) aligned exactly 1 time
    190 (32.37%) aligned >1 times
59.28% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.14

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1155 AND total interactions scored: 1134


Target prediction time is 6.24


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.94 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:36:42 2024]
Finished job 2176.
1 of 1007 steps (0.1%) done
Select jobs to execute...

[Sun Jan 21 23:36:42 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.192.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.192.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2116
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.192.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.192.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:36:42 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.192.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f50481a3490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    222 (37.82%) aligned 0 times
    150 (25.55%) aligned exactly 1 time
    215 (36.63%) aligned >1 times
62.18% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.66

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1260 AND total interactions scored: 1239


Target prediction time is 5.76


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.75 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:36:52 2024]
Finished job 2116.
2 of 1007 steps (0.2%) done
Select jobs to execute...

[Sun Jan 21 23:36:52 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.544.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.544.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2236
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.544.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.544.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:36:52 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.544.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f7049fd3490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    231 (39.35%) aligned 0 times
    159 (27.09%) aligned exactly 1 time
    197 (33.56%) aligned >1 times
60.65% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.67

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1190 AND total interactions scored: 1157


Target prediction time is 6.79


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.86 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:37:03 2024]
Finished job 2236.
3 of 1007 steps (0.3%) done
Select jobs to execute...

[Sun Jan 21 23:37:04 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.983.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.983.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2895
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.983.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.983.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:37:04 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.983.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f51e7fab490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    248 (42.25%) aligned 0 times
    144 (24.53%) aligned exactly 1 time
    195 (33.22%) aligned >1 times
57.75% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.26

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1155 AND total interactions scored: 1142


Target prediction time is 6.36


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.31 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:37:14 2024]
Finished job 2895.
4 of 1007 steps (0.4%) done
Select jobs to execute...

[Sun Jan 21 23:37:14 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.376.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.376.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2296
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.376.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.376.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:37:15 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.376.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f14486a3490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    253 (43.10%) aligned 0 times
    134 (22.83%) aligned exactly 1 time
    200 (34.07%) aligned >1 times
56.90% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.37

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1200 AND total interactions scored: 1186


Target prediction time is 6.48


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.41 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:37:25 2024]
Finished job 2296.
5 of 1007 steps (0.5%) done
Select jobs to execute...

[Sun Jan 21 23:37:25 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.832.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.832.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2356
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.832.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.832.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:37:25 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.832.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fbc0697b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    233 (39.69%) aligned 0 times
    136 (23.17%) aligned exactly 1 time
    218 (37.14%) aligned >1 times
60.31% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.91

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1226 AND total interactions scored: 1213


Target prediction time is 6.01


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.83 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:37:35 2024]
Finished job 2356.
6 of 1007 steps (1%) done
Select jobs to execute...

[Sun Jan 21 23:37:36 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.147.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.147.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2716
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.147.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.147.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:37:36 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.02
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.147.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fa13f02b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    248 (42.25%) aligned 0 times
    135 (23.00%) aligned exactly 1 time
    204 (34.75%) aligned >1 times
57.75% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.73

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1219 AND total interactions scored: 1203


Target prediction time is 5.84


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.69 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:37:46 2024]
Finished job 2716.
7 of 1007 steps (1%) done
Select jobs to execute...

[Sun Jan 21 23:37:46 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.993.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.993.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2955
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.993.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.993.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:37:46 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.993.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f3d332ab490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    260 (44.29%) aligned 0 times
    132 (22.49%) aligned exactly 1 time
    195 (33.22%) aligned >1 times
55.71% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.06

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1295 AND total interactions scored: 1260


Target prediction time is 6.17


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.01




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.98 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:37:56 2024]
Finished job 2955.
8 of 1007 steps (1%) done
Select jobs to execute...

[Sun Jan 21 23:37:56 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.215.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.215.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2776
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.215.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.215.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:37:56 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.215.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7ffa99973490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    238 (40.55%) aligned 0 times
    140 (23.85%) aligned exactly 1 time
    209 (35.60%) aligned >1 times
59.45% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.61

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1263 AND total interactions scored: 1244


Target prediction time is 6.7


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.53 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:38:07 2024]
Finished job 2776.
9 of 1007 steps (1%) done
Select jobs to execute...

[Sun Jan 21 23:38:07 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.667.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.667.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2835
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.667.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.667.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:38:07 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.667.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f2bc275b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    244 (41.57%) aligned 0 times
    138 (23.51%) aligned exactly 1 time
    205 (34.92%) aligned >1 times
58.43% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.26

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1131 AND total interactions scored: 1113


Target prediction time is 5.35


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.19 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:38:16 2024]
Finished job 2835.
10 of 1007 steps (1%) done
Select jobs to execute...

[Sun Jan 21 23:38:17 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.587.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.587.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2836
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.587.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.587.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:38:17 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.587.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f0fb88af490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    249 (42.42%) aligned 0 times
    138 (23.51%) aligned exactly 1 time
    200 (34.07%) aligned >1 times
57.58% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.1

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1160 AND total interactions scored: 1135


Target prediction time is 5.2


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.07 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:38:26 2024]
Finished job 2836.
11 of 1007 steps (1%) done
Select jobs to execute...

[Sun Jan 21 23:38:26 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.339.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.339.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2775
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.339.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.339.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:38:26 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.339.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f7e8e187490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    246 (41.91%) aligned 0 times
    145 (24.70%) aligned exactly 1 time
    196 (33.39%) aligned >1 times
58.09% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.91

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1159 AND total interactions scored: 1138


Target prediction time is 6.02


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.67 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:38:36 2024]
Finished job 2775.
12 of 1007 steps (1%) done
Select jobs to execute...

[Sun Jan 21 23:38:36 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.669.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.669.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2896
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.669.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.669.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:38:36 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.669.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fe11e537490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    234 (39.86%) aligned 0 times
    146 (24.87%) aligned exactly 1 time
    207 (35.26%) aligned >1 times
60.14% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.94

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1259 AND total interactions scored: 1249


Target prediction time is 6.04


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.89 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:38:46 2024]
Finished job 2896.
13 of 1007 steps (1%) done
Select jobs to execute...

[Sun Jan 21 23:38:46 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.746.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.746.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2956
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.746.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.746.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:38:47 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.746.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f75d64a3490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    255 (43.44%) aligned 0 times
    151 (25.72%) aligned exactly 1 time
    181 (30.83%) aligned >1 times
56.56% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.07

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1093 AND total interactions scored: 1076


Target prediction time is 6.17


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.89 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:38:57 2024]
Finished job 2956.
14 of 1007 steps (1%) done
Select jobs to execute...

[Sun Jan 21 23:38:57 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.852.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.852.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2908
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.852.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.852.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:38:57 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.852.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fc84778f490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    236 (40.20%) aligned 0 times
    142 (24.19%) aligned exactly 1 time
    209 (35.60%) aligned >1 times
59.80% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.39

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1236 AND total interactions scored: 1211


Target prediction time is 6.5


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.16 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:39:07 2024]
Finished job 2908.
15 of 1007 steps (1%) done
Select jobs to execute...

[Sun Jan 21 23:39:07 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.554.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.554.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2715
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.554.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.554.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:39:07 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.554.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f279a6c7490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    236 (40.20%) aligned 0 times
    137 (23.34%) aligned exactly 1 time
    214 (36.46%) aligned >1 times
59.80% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.59

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1146 AND total interactions scored: 1135


Target prediction time is 5.68


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.44 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:39:17 2024]
Finished job 2715.
16 of 1007 steps (2%) done
Select jobs to execute...

[Sun Jan 21 23:39:17 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.352.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.352.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2821
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.352.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.352.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:39:17 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.352.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f8197263490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    243 (41.40%) aligned 0 times
    131 (22.32%) aligned exactly 1 time
    213 (36.29%) aligned >1 times
58.60% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.29

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1101 AND total interactions scored: 1084


Target prediction time is 5.38


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.05 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:39:26 2024]
Finished job 2821.
17 of 1007 steps (2%) done
Select jobs to execute...

[Sun Jan 21 23:39:27 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.930.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.930.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2355
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.930.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.930.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:39:27 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.930.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fa4538cf490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    242 (41.23%) aligned 0 times
    143 (24.36%) aligned exactly 1 time
    202 (34.41%) aligned >1 times
58.77% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.9

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1065 AND total interactions scored: 1044


Target prediction time is 6.02


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.59 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:39:36 2024]
Finished job 2355.
18 of 1007 steps (2%) done
Select jobs to execute...

[Sun Jan 21 23:39:37 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.675.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.675.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2117
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.675.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.675.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:39:37 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.675.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7ff0f6bf7490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    242 (41.23%) aligned 0 times
    138 (23.51%) aligned exactly 1 time
    207 (35.26%) aligned >1 times
58.77% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.86

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1099 AND total interactions scored: 1083


Target prediction time is 5.96


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.71 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:39:47 2024]
Finished job 2117.
19 of 1007 steps (2%) done
Select jobs to execute...

[Sun Jan 21 23:39:47 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.71.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.71.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2539
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.71.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.71.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:39:47 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.71.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fe0bc617490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    235 (40.03%) aligned 0 times
    149 (25.38%) aligned exactly 1 time
    203 (34.58%) aligned >1 times
59.97% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.6

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1253 AND total interactions scored: 1229


Target prediction time is 5.76


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.45 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:39:56 2024]
Finished job 2539.
20 of 1007 steps (2%) done
Select jobs to execute...

[Sun Jan 21 23:39:57 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.12.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.12.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2599
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.12.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.12.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:39:57 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.12.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f73a9d2b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:01
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    241 (41.06%) aligned 0 times
    146 (24.87%) aligned exactly 1 time
    200 (34.07%) aligned >1 times
58.94% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.09

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1144 AND total interactions scored: 1131


Target prediction time is 6.2


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.08 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:40:07 2024]
Finished job 2599.
21 of 1007 steps (2%) done
Select jobs to execute...

[Sun Jan 21 23:40:07 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.710.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.710.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2659
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.710.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.710.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:40:07 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.710.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f53233db490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    255 (43.44%) aligned 0 times
    137 (23.34%) aligned exactly 1 time
    195 (33.22%) aligned >1 times
56.56% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.66

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1094 AND total interactions scored: 1074


Target prediction time is 5.77


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.56 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:40:17 2024]
Finished job 2659.
22 of 1007 steps (2%) done
Select jobs to execute...

[Sun Jan 21 23:40:17 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.974.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.974.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2766
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.974.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.974.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:40:17 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.974.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f0bad47b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    234 (39.86%) aligned 0 times
    153 (26.06%) aligned exactly 1 time
    200 (34.07%) aligned >1 times
60.14% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.77

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1215 AND total interactions scored: 1191


Target prediction time is 5.87


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.52 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:40:27 2024]
Finished job 2766.
23 of 1007 steps (2%) done
Select jobs to execute...

[Sun Jan 21 23:40:27 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.152.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.152.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2413
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.152.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.152.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:40:27 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.152.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f6654b8b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    250 (42.59%) aligned 0 times
    137 (23.34%) aligned exactly 1 time
    200 (34.07%) aligned >1 times
57.41% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.85

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1278 AND total interactions scored: 1251


Target prediction time is 5.97


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.72 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:40:37 2024]
Finished job 2413.
24 of 1007 steps (2%) done
Select jobs to execute...

[Sun Jan 21 23:40:37 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.826.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.826.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2533
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.826.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.826.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:40:37 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.826.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f5f3247b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    246 (41.91%) aligned 0 times
    139 (23.68%) aligned exactly 1 time
    202 (34.41%) aligned >1 times
58.09% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.78

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1182 AND total interactions scored: 1166


Target prediction time is 5.88


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.72 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:40:47 2024]
Finished job 2533.
25 of 1007 steps (2%) done
Select jobs to execute...

[Sun Jan 21 23:40:47 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.173.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.173.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2054
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.173.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.173.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:40:47 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.173.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fd123adf490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    235 (40.03%) aligned 0 times
    141 (24.02%) aligned exactly 1 time
    211 (35.95%) aligned >1 times
59.97% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.98

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1236 AND total interactions scored: 1218


Target prediction time is 6.12


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.83 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:40:57 2024]
Finished job 2054.
26 of 1007 steps (3%) done
Select jobs to execute...

[Sun Jan 21 23:40:58 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.549.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.549.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2414
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.549.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.549.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:40:58 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.549.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7ff7e15e3490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    252 (42.93%) aligned 0 times
    144 (24.53%) aligned exactly 1 time
    191 (32.54%) aligned >1 times
57.07% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.1

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1152 AND total interactions scored: 1139


Target prediction time is 6.19


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.95 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:41:08 2024]
Finished job 2414.
27 of 1007 steps (3%) done
Select jobs to execute...

[Sun Jan 21 23:41:08 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.96.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.96.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2897
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.96.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.96.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:41:08 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.96.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f9f8af43490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    238 (40.55%) aligned 0 times
    140 (23.85%) aligned exactly 1 time
    209 (35.60%) aligned >1 times
59.45% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.69

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1220 AND total interactions scored: 1188


Target prediction time is 5.8


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.01




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.52 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:41:18 2024]
Finished job 2897.
28 of 1007 steps (3%) done
Select jobs to execute...

[Sun Jan 21 23:41:18 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.447.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.447.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2957
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.447.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.447.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:41:18 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.447.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f66ca5cb490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    226 (38.50%) aligned 0 times
    151 (25.72%) aligned exactly 1 time
    210 (35.78%) aligned >1 times
61.50% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.62

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1247 AND total interactions scored: 1229


Target prediction time is 5.75


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.43 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:41:28 2024]
Finished job 2957.
29 of 1007 steps (3%) done
Select jobs to execute...

[Sun Jan 21 23:41:28 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.687.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.687.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2118
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.687.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.687.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:41:28 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.687.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f6d97fa7490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    249 (42.42%) aligned 0 times
    129 (21.98%) aligned exactly 1 time
    209 (35.60%) aligned >1 times
57.58% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.92

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1185 AND total interactions scored: 1166


Target prediction time is 6.09


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.01




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.89 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:41:38 2024]
Finished job 2118.
30 of 1007 steps (3%) done
Select jobs to execute...

[Sun Jan 21 23:41:38 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.337.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.337.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2178
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.337.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.337.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:41:38 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.337.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f6e0fc83490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    227 (38.67%) aligned 0 times
    156 (26.58%) aligned exactly 1 time
    204 (34.75%) aligned >1 times
61.33% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.39

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1258 AND total interactions scored: 1243


Target prediction time is 6.49


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.27 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:41:48 2024]
Finished job 2178.
31 of 1007 steps (3%) done
Select jobs to execute...

[Sun Jan 21 23:41:49 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.670.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.670.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2837
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.670.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.670.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:41:49 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.670.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f0ede10f490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    254 (43.27%) aligned 0 times
    138 (23.51%) aligned exactly 1 time
    195 (33.22%) aligned >1 times
56.73% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.17

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1163 AND total interactions scored: 1146


Target prediction time is 6.27


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.98 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:41:59 2024]
Finished job 2837.
32 of 1007 steps (3%) done
Select jobs to execute...

[Sun Jan 21 23:41:59 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.365.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.365.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2238
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.365.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.365.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:41:59 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.365.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f753ba37490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    243 (41.40%) aligned 0 times
    136 (23.17%) aligned exactly 1 time
    208 (35.43%) aligned >1 times
58.60% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.86

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1239 AND total interactions scored: 1214


Target prediction time is 5.96


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.8 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:42:09 2024]
Finished job 2238.
33 of 1007 steps (3%) done
Select jobs to execute...

[Sun Jan 21 23:42:09 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.945.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.945.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2777
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.945.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.945.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:42:09 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.945.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f06fac7b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    233 (39.69%) aligned 0 times
    141 (24.02%) aligned exactly 1 time
    213 (36.29%) aligned >1 times
60.31% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.78

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1216 AND total interactions scored: 1194


Target prediction time is 5.87


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.54 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:42:19 2024]
Finished job 2777.
34 of 1007 steps (3%) done
Select jobs to execute...

[Sun Jan 21 23:42:19 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.209.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.209.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2298
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.209.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.209.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:42:19 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.209.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f0d980c7490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    251 (42.76%) aligned 0 times
    137 (23.34%) aligned exactly 1 time
    199 (33.90%) aligned >1 times
57.24% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.25

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1165 AND total interactions scored: 1146


Target prediction time is 6.35


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.93 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:42:29 2024]
Finished job 2298.
35 of 1007 steps (3%) done
Select jobs to execute...

[Sun Jan 21 23:42:30 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.197.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.197.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2717
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.197.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.197.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:42:30 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.197.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f8b3127f490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    227 (38.67%) aligned 0 times
    155 (26.41%) aligned exactly 1 time
    205 (34.92%) aligned >1 times
61.33% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.91

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1159 AND total interactions scored: 1132


Target prediction time is 6.05


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.84 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:42:40 2024]
Finished job 2717.
36 of 1007 steps (4%) done
Select jobs to execute...

[Sun Jan 21 23:42:40 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.422.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.422.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2358
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.422.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.422.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:42:40 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.422.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f76434ab490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    232 (39.52%) aligned 0 times
    150 (25.55%) aligned exactly 1 time
    205 (34.92%) aligned >1 times
60.48% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.88

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1233 AND total interactions scored: 1218


Target prediction time is 5.98


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.79 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:42:50 2024]
Finished job 2358.
37 of 1007 steps (4%) done
Select jobs to execute...

[Sun Jan 21 23:42:50 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.112.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.112.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2718
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.112.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.112.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:42:50 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.112.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f19bd82b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    264 (44.97%) aligned 0 times
    117 (19.93%) aligned exactly 1 time
    206 (35.09%) aligned >1 times
55.03% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.54

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1208 AND total interactions scored: 1183


Target prediction time is 5.65


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.29 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:43:00 2024]
Finished job 2718.
38 of 1007 steps (4%) done
Select jobs to execute...

[Sun Jan 21 23:43:00 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.282.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.282.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2778
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.282.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.282.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:43:00 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.282.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f871836b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    241 (41.06%) aligned 0 times
    144 (24.53%) aligned exactly 1 time
    202 (34.41%) aligned >1 times
58.94% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.21

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1239 AND total interactions scored: 1222


Target prediction time is 6.31


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.08 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:43:10 2024]
Finished job 2778.
39 of 1007 steps (4%) done
Select jobs to execute...

[Sun Jan 21 23:43:10 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.481.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.481.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2357
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.481.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.481.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:43:10 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.481.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f039620f490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    250 (42.59%) aligned 0 times
    137 (23.34%) aligned exactly 1 time
    200 (34.07%) aligned >1 times
57.41% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.29

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1230 AND total interactions scored: 1215


Target prediction time is 6.39


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.99 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:43:20 2024]
Finished job 2357.
40 of 1007 steps (4%) done
Select jobs to execute...

[Sun Jan 21 23:43:20 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.677.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.677.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2838
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.677.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.677.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:43:21 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.677.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f62d730f490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    252 (42.93%) aligned 0 times
    121 (20.61%) aligned exactly 1 time
    214 (36.46%) aligned >1 times
57.07% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.49

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1255 AND total interactions scored: 1239


Target prediction time is 5.59


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.28 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:43:30 2024]
Finished job 2838.
41 of 1007 steps (4%) done
Select jobs to execute...

[Sun Jan 21 23:43:30 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.309.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.309.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2297
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.309.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.309.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:43:30 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.309.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f86d2a8f490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    244 (41.57%) aligned 0 times
    140 (23.85%) aligned exactly 1 time
    203 (34.58%) aligned >1 times
58.43% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.11

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1206 AND total interactions scored: 1194


Target prediction time is 6.22


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.88 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:43:40 2024]
Finished job 2297.
42 of 1007 steps (4%) done
Select jobs to execute...

[Sun Jan 21 23:43:40 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.806.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.806.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2898
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.806.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.806.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:43:41 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.806.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7ffaaf42b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    226 (38.50%) aligned 0 times
    155 (26.41%) aligned exactly 1 time
    206 (35.09%) aligned >1 times
61.50% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.84

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1273 AND total interactions scored: 1258


Target prediction time is 5.96


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.87 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:43:51 2024]
Finished job 2898.
43 of 1007 steps (4%) done
Select jobs to execute...

[Sun Jan 21 23:43:51 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.85.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.85.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2237
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.85.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.85.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:43:51 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.85.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fdf1f7df490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    243 (41.40%) aligned 0 times
    154 (26.24%) aligned exactly 1 time
    190 (32.37%) aligned >1 times
58.60% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.84

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1179 AND total interactions scored: 1161


Target prediction time is 5.95


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.8 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:44:01 2024]
Finished job 2237.
44 of 1007 steps (4%) done
Select jobs to execute...

[Sun Jan 21 23:44:01 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.817.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.817.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2958
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.817.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.817.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:44:01 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.817.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7ff13a27b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    244 (41.57%) aligned 0 times
    145 (24.70%) aligned exactly 1 time
    198 (33.73%) aligned >1 times
58.43% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.36

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1300 AND total interactions scored: 1283


Target prediction time is 6.46


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.33 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:44:12 2024]
Finished job 2958.
45 of 1007 steps (4%) done
Select jobs to execute...

[Sun Jan 21 23:44:12 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.874.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.874.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2119
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.874.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.874.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:44:12 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.874.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7ff3e4ccb490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    256 (43.61%) aligned 0 times
    148 (25.21%) aligned exactly 1 time
    183 (31.18%) aligned >1 times
56.39% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.69

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1080 AND total interactions scored: 1063


Target prediction time is 5.78


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.4 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:44:21 2024]
Finished job 2119.
46 of 1007 steps (5%) done
Select jobs to execute...

[Sun Jan 21 23:44:22 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.31.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.31.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2239
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.31.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.31.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:44:22 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.31.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f76b5cf3490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    237 (40.37%) aligned 0 times
    154 (26.24%) aligned exactly 1 time
    196 (33.39%) aligned >1 times
59.63% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.38

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1188 AND total interactions scored: 1179


Target prediction time is 6.56


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.35 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:44:32 2024]
Finished job 2239.
47 of 1007 steps (5%) done
Select jobs to execute...

[Sun Jan 21 23:44:32 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.361.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.361.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2179
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.361.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.361.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:44:32 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.361.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f6a870d7490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    234 (39.86%) aligned 0 times
    150 (25.55%) aligned exactly 1 time
    203 (34.58%) aligned >1 times
60.14% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.26

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1132 AND total interactions scored: 1107


Target prediction time is 6.36


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.13 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:44:43 2024]
Finished job 2179.
48 of 1007 steps (5%) done
Select jobs to execute...

[Sun Jan 21 23:44:43 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.295.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.295.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2299
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.295.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.295.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:44:43 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.02
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.295.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fe4d5abf490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    256 (43.61%) aligned 0 times
    134 (22.83%) aligned exactly 1 time
    197 (33.56%) aligned >1 times
56.39% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.78

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1183 AND total interactions scored: 1172


Target prediction time is 5.88


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.6 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:44:53 2024]
Finished job 2299.
49 of 1007 steps (5%) done
Select jobs to execute...

[Sun Jan 21 23:44:53 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.312.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.312.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2177
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.312.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.312.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:44:53 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.312.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f38024c3490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    245 (41.74%) aligned 0 times
    131 (22.32%) aligned exactly 1 time
    211 (35.95%) aligned >1 times
58.26% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.88

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1234 AND total interactions scored: 1217


Target prediction time is 6.99


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.66 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:45:04 2024]
Finished job 2177.
50 of 1007 steps (5%) done
Select jobs to execute...

[Sun Jan 21 23:45:04 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.216.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.216.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2359
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.216.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.216.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:45:04 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.216.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fb705cfb490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    241 (41.06%) aligned 0 times
    163 (27.77%) aligned exactly 1 time
    183 (31.18%) aligned >1 times
58.94% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.24

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1194 AND total interactions scored: 1171


Target prediction time is 6.34


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.95 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:45:14 2024]
Finished job 2359.
51 of 1007 steps (5%) done
Select jobs to execute...

[Sun Jan 21 23:45:14 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.189.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.189.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2295
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.189.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.189.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:45:14 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.189.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fa669d43490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    232 (39.52%) aligned 0 times
    131 (22.32%) aligned exactly 1 time
    224 (38.16%) aligned >1 times
60.48% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.76

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1279 AND total interactions scored: 1256


Target prediction time is 5.85


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.54 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:45:24 2024]
Finished job 2295.
52 of 1007 steps (5%) done
Select jobs to execute...

[Sun Jan 21 23:45:24 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.747.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.747.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2719
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.747.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.747.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:45:24 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.747.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f455e82b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    264 (44.97%) aligned 0 times
    118 (20.10%) aligned exactly 1 time
    205 (34.92%) aligned >1 times
55.03% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.97

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1140 AND total interactions scored: 1121


Target prediction time is 6.09


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.01




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.8 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:45:34 2024]
Finished job 2719.
53 of 1007 steps (5%) done
Select jobs to execute...

[Sun Jan 21 23:45:34 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.758.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.758.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2779
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.758.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.758.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:45:34 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.758.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f9025713490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    244 (41.57%) aligned 0 times
    137 (23.34%) aligned exactly 1 time
    206 (35.09%) aligned >1 times
58.43% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.64

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1253 AND total interactions scored: 1238


Target prediction time is 5.74


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.43 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:45:44 2024]
Finished job 2779.
54 of 1007 steps (5%) done
Select jobs to execute...

[Sun Jan 21 23:45:44 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.433.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.433.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2839
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.433.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.433.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:45:44 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.433.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f81b40bf490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    251 (42.76%) aligned 0 times
    143 (24.36%) aligned exactly 1 time
    193 (32.88%) aligned >1 times
57.24% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.77

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1249 AND total interactions scored: 1227


Target prediction time is 5.88


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.56 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:45:54 2024]
Finished job 2839.
55 of 1007 steps (5%) done
Select jobs to execute...

[Sun Jan 21 23:45:54 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.423.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.423.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2600
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.423.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.423.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:45:54 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.423.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fdddff0b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    235 (40.03%) aligned 0 times
    144 (24.53%) aligned exactly 1 time
    208 (35.43%) aligned >1 times
59.97% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.77

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1288 AND total interactions scored: 1270


Target prediction time is 6.88


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.6 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:46:05 2024]
Finished job 2600.
56 of 1007 steps (6%) done
Select jobs to execute...

[Sun Jan 21 23:46:05 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.166.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.166.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2060
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.166.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.166.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:46:05 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.04
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.166.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f834660b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    240 (40.89%) aligned 0 times
    145 (24.70%) aligned exactly 1 time
    202 (34.41%) aligned >1 times
59.11% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.51

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1136 AND total interactions scored: 1122


Target prediction time is 6.74


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.45 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:46:16 2024]
Finished job 2060.
57 of 1007 steps (6%) done
Select jobs to execute...

[Sun Jan 21 23:46:16 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.432.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.432.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2660
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.432.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.432.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:46:16 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.432.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f29d7adb490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    234 (39.86%) aligned 0 times
    147 (25.04%) aligned exactly 1 time
    206 (35.09%) aligned >1 times
60.14% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.92

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1092 AND total interactions scored: 1074


Target prediction time is 6.01


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.82 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:46:26 2024]
Finished job 2660.
58 of 1007 steps (6%) done
Select jobs to execute...

[Sun Jan 21 23:46:26 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.21.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.21.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2061
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.21.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.21.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:46:26 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.21.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f9bae7cf490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    220 (37.48%) aligned 0 times
    167 (28.45%) aligned exactly 1 time
    200 (34.07%) aligned >1 times
62.52% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.22

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1240 AND total interactions scored: 1226


Target prediction time is 6.33


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.98 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:46:37 2024]
Finished job 2061.
59 of 1007 steps (6%) done
Select jobs to execute...

[Sun Jan 21 23:46:37 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.450.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.450.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2120
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.450.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.450.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:46:37 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.450.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fedf5893490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    231 (39.35%) aligned 0 times
    157 (26.75%) aligned exactly 1 time
    199 (33.90%) aligned >1 times
60.65% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.87

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1197 AND total interactions scored: 1179


Target prediction time is 5.97


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.88 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:46:47 2024]
Finished job 2120.
60 of 1007 steps (6%) done
Select jobs to execute...

[Sun Jan 21 23:46:47 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.60.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.60.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2180
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.60.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.60.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:46:47 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.60.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7ff45fa5b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    226 (38.50%) aligned 0 times
    164 (27.94%) aligned exactly 1 time
    197 (33.56%) aligned >1 times
61.50% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.66

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1283 AND total interactions scored: 1261


Target prediction time is 6.78


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.47 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:46:58 2024]
Finished job 2180.
61 of 1007 steps (6%) done
Select jobs to execute...

[Sun Jan 21 23:46:58 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.739.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.739.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2240
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.739.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.739.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:46:58 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.739.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fe769e33490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    226 (38.50%) aligned 0 times
    175 (29.81%) aligned exactly 1 time
    186 (31.69%) aligned >1 times
61.50% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.86

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1229 AND total interactions scored: 1213


Target prediction time is 5.96


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.63 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:47:08 2024]
Finished job 2240.
62 of 1007 steps (6%) done
Select jobs to execute...

[Sun Jan 21 23:47:08 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.349.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.349.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2300
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.349.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.349.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:47:08 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.349.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fab933db490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    250 (42.59%) aligned 0 times
    140 (23.85%) aligned exactly 1 time
    197 (33.56%) aligned >1 times
57.41% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.89

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1141 AND total interactions scored: 1130


Target prediction time is 5.99


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.64 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:47:18 2024]
Finished job 2300.
63 of 1007 steps (6%) done
Select jobs to execute...

[Sun Jan 21 23:47:18 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.934.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.934.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2889
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.934.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.934.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:47:18 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.934.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7ffa3ae8b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    216 (36.80%) aligned 0 times
    154 (26.24%) aligned exactly 1 time
    217 (36.97%) aligned >1 times
63.20% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.16

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1296 AND total interactions scored: 1275


Target prediction time is 6.26


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.83 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:47:28 2024]
Finished job 2889.
64 of 1007 steps (6%) done
Select jobs to execute...

[Sun Jan 21 23:47:28 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.805.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.805.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2360
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.805.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.805.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:47:28 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.805.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7ff0572c3490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    246 (41.91%) aligned 0 times
    139 (23.68%) aligned exactly 1 time
    202 (34.41%) aligned >1 times
58.09% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.74

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1240 AND total interactions scored: 1216


Target prediction time is 5.84


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.46 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:47:38 2024]
Finished job 2360.
65 of 1007 steps (6%) done
Select jobs to execute...

[Sun Jan 21 23:47:38 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.77.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.77.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2959
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.77.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.77.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:47:38 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.77.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f83cd007490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    219 (37.31%) aligned 0 times
    153 (26.06%) aligned exactly 1 time
    215 (36.63%) aligned >1 times
62.69% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.8

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1274 AND total interactions scored: 1256


Target prediction time is 5.9


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.62 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:47:48 2024]
Finished job 2959.
66 of 1007 steps (7%) done
Select jobs to execute...

[Sun Jan 21 23:47:48 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.818.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.818.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2720
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.818.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.818.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:47:48 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.818.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fe1a5483490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    259 (44.12%) aligned 0 times
    141 (24.02%) aligned exactly 1 time
    187 (31.86%) aligned >1 times
55.88% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.01

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1317 AND total interactions scored: 1302


Target prediction time is 6.12


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.01 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:47:58 2024]
Finished job 2720.
67 of 1007 steps (7%) done
Select jobs to execute...

[Sun Jan 21 23:47:58 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.872.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.872.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2899
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.872.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.872.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:47:59 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.02
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.872.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f19f35bf490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    252 (42.93%) aligned 0 times
    147 (25.04%) aligned exactly 1 time
    188 (32.03%) aligned >1 times
57.07% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.97

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1124 AND total interactions scored: 1106


Target prediction time is 6.1


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.79 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:48:08 2024]
Finished job 2899.
68 of 1007 steps (7%) done
Select jobs to execute...

[Sun Jan 21 23:48:09 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.104.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.104.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2780
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.104.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.104.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:48:09 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.104.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fc2127b3490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    252 (42.93%) aligned 0 times
    140 (23.85%) aligned exactly 1 time
    195 (33.22%) aligned >1 times
57.07% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.71

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1136 AND total interactions scored: 1116


Target prediction time is 5.82


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.42 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:48:18 2024]
Finished job 2780.
69 of 1007 steps (7%) done
Select jobs to execute...

[Sun Jan 21 23:48:18 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.987.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.987.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2840
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.987.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.987.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:48:18 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.987.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f74a119b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    215 (36.63%) aligned 0 times
    154 (26.24%) aligned exactly 1 time
    218 (37.14%) aligned >1 times
63.37% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.73

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1272 AND total interactions scored: 1245


Target prediction time is 5.88


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.54 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:48:28 2024]
Finished job 2840.
70 of 1007 steps (7%) done
Select jobs to execute...

[Sun Jan 21 23:48:28 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.487.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.487.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2900
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.487.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.487.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:48:28 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.487.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fbc627fb490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    239 (40.72%) aligned 0 times
    123 (20.95%) aligned exactly 1 time
    225 (38.33%) aligned >1 times
59.28% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.64

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1283 AND total interactions scored: 1259


Target prediction time is 6.75


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.42 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:48:39 2024]
Finished job 2900.
71 of 1007 steps (7%) done
Select jobs to execute...

[Sun Jan 21 23:48:39 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.497.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.497.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2235
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.497.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.497.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:48:39 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.497.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f5cb7f0b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    245 (41.74%) aligned 0 times
    129 (21.98%) aligned exactly 1 time
    213 (36.29%) aligned >1 times
58.26% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.21

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1222 AND total interactions scored: 1207


Target prediction time is 6.3


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.15 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:48:49 2024]
Finished job 2235.
72 of 1007 steps (7%) done
Select jobs to execute...

[Sun Jan 21 23:48:50 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.698.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.698.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2960
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.698.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.698.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:48:50 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.698.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f4af7c43490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    247 (42.08%) aligned 0 times
    131 (22.32%) aligned exactly 1 time
    209 (35.60%) aligned >1 times
57.92% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.99

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1260 AND total interactions scored: 1245


Target prediction time is 6.11


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.76 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:49:00 2024]
Finished job 2960.
73 of 1007 steps (7%) done
Select jobs to execute...

[Sun Jan 21 23:49:00 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.76.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.76.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2175
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.76.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.76.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:49:00 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.76.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fc41828b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    234 (39.86%) aligned 0 times
    151 (25.72%) aligned exactly 1 time
    202 (34.41%) aligned >1 times
60.14% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.08

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1210 AND total interactions scored: 1194


Target prediction time is 6.17


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.01




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.99 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:49:10 2024]
Finished job 2175.
74 of 1007 steps (7%) done
Select jobs to execute...

[Sun Jan 21 23:49:10 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.809.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.809.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2121
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.809.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.809.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:49:10 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.809.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fe0eeb37490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    239 (40.72%) aligned 0 times
    139 (23.68%) aligned exactly 1 time
    209 (35.60%) aligned >1 times
59.28% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.8

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1200 AND total interactions scored: 1181


Target prediction time is 5.9


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.6 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:49:20 2024]
Finished job 2121.
75 of 1007 steps (7%) done
Select jobs to execute...

[Sun Jan 21 23:49:20 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.731.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.731.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2115
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.731.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.731.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:49:20 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.731.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fb3fc623490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    236 (40.20%) aligned 0 times
    145 (24.70%) aligned exactly 1 time
    206 (35.09%) aligned >1 times
59.80% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.82

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1274 AND total interactions scored: 1259


Target prediction time is 5.93


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.73 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:49:30 2024]
Finished job 2115.
76 of 1007 steps (8%) done
Select jobs to execute...

[Sun Jan 21 23:49:30 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.125.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.125.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2181
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.125.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.125.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:49:30 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.125.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f526436f490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    244 (41.57%) aligned 0 times
    155 (26.41%) aligned exactly 1 time
    188 (32.03%) aligned >1 times
58.43% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.77

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1221 AND total interactions scored: 1200


Target prediction time is 6.87


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.01




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.6 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:49:41 2024]
Finished job 2181.
77 of 1007 steps (8%) done
Select jobs to execute...

[Sun Jan 21 23:49:41 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.771.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.771.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2241
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.771.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.771.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:49:41 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.771.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fbb128fb490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    234 (39.86%) aligned 0 times
    127 (21.64%) aligned exactly 1 time
    226 (38.50%) aligned >1 times
60.14% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.11

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1306 AND total interactions scored: 1277


Target prediction time is 6.26


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.11 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:49:52 2024]
Finished job 2241.
78 of 1007 steps (8%) done
Select jobs to execute...

[Sun Jan 21 23:49:52 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.288.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.288.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2301
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.288.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.288.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:49:52 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.288.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7fe24387b490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    221 (37.65%) aligned 0 times
    164 (27.94%) aligned exactly 1 time
    202 (34.41%) aligned >1 times
62.35% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.34

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1244 AND total interactions scored: 1224


Target prediction time is 6.46


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.22 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:50:02 2024]
Finished job 2301.
79 of 1007 steps (8%) done
Select jobs to execute...

[Sun Jan 21 23:50:02 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.212.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.212.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 3015
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.212.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.212.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:50:03 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.212.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f451da5f490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    240 (40.89%) aligned 0 times
    139 (23.68%) aligned exactly 1 time
    208 (35.43%) aligned >1 times
59.11% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.51

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1211 AND total interactions scored: 1194


Target prediction time is 6.61


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.48 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:50:13 2024]
Finished job 3015.
80 of 1007 steps (8%) done
Select jobs to execute...

[Sun Jan 21 23:50:13 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.269.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.269.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2361
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.269.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.269.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:50:13 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.269.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f7f7cebb490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    242 (41.23%) aligned 0 times
    139 (23.68%) aligned exactly 1 time
    206 (35.09%) aligned >1 times
58.77% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 5.71

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1197 AND total interactions scored: 1179


Target prediction time is 5.8


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 9.42 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:50:23 2024]
Finished job 2361.
81 of 1007 steps (8%) done
Select jobs to execute...

[Sun Jan 21 23:50:23 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.922.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.922.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2894
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.922.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.922.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:50:23 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.922.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f6215cb3490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    252 (42.93%) aligned 0 times
    131 (22.32%) aligned exactly 1 time
    204 (34.75%) aligned >1 times
57.07% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.23

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1223 AND total interactions scored: 1206


Target prediction time is 6.33


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.07 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:50:34 2024]
Finished job 2894.
82 of 1007 steps (8%) done
Select jobs to execute...

[Sun Jan 21 23:50:34 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.912.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.912.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2954
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.912.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.912.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')

#### Fn: Checking user #################################
Hello 'ec2-user' - Sun Jan 21 23:50:34 2024
You can seek help or report issues at: https://github.com/atulkakrana/sPARTA/issues

#### Fn: Check libraries and components ################
--numpy              : found
--scipy              : found

#### Fn: Check input files #############################
--miRNAFile          : found
--annoFile           : found
--genomeFile         : found

#### Fn: genomeReader ##################################
Caching genome fasta
Genome dict prepared for 1 chromosome/scaffolds

####Fn: gffParser ######################################
Entries in genome_info:285

#### Fn: extractFeatures ###############################
--Caching gene coords for chromosome: Ath_chr2 and strand: c
--Caching gene coords for chromosome: Ath_chr2 and strand: w
Number of coords in 'coords' list: 285

#### Fn: getFASTA ######################################
Fetching genes or intergenic regions
--Reading chromosome: Ath_chr2 and strand: c
--Reading chromosome: Ath_chr2 and strand: w
This is the extracted file: ./genomic_seq.fa
Fn - fragFASTA
+Purging older files

+Input FASTA size: 0.59MB**
--No fragmentation performed for file ['./genomic_seq.fa']
fileFrag time: 0.01
tarPred: H | tarScore: S | Uniq filter: True

Fragments to be indexed and used for TP: ['./genomic_seq.fa']

Fn: miRNAProcessor#########################################

Processing "/home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.912.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa" file to clean FASTA headers

Total number of miRNAs in given file: 587

***********Parallel instance of <function tarFind4 at 0x7f7f642bf490> is being executed*********

nprocPP:1

Settings:
  Output files: "./index/./genomic_seq.fa_index.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ./genomic_seq.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 88230.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 111602 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111603 for bucket 1
Getting block 2 of 7
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 109254 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109255 for bucket 2
Getting block 3 of 7
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 67268 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 67269 for bucket 3
Getting block 4 of 7
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 60750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 60751 for bucket 4
Getting block 5 of 7
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 71372 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71373 for bucket 5
Getting block 6 of 7
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109314 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 109315 for bucket 6
Getting block 7 of 7
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 88054 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 88055 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 154405
Using parameters --bmax 115804 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 115804 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 77201.6 (target: 115803)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (115804) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 68271 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68272 for bucket 1
Getting block 2 of 8
  Reserving size (115804) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 71198 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 71199 for bucket 2
Getting block 3 of 8
  Reserving size (115804) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 61532 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61533 for bucket 3
Getting block 4 of 8
  Reserving size (115804) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 108006 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 108007 for bucket 4
Getting block 5 of 8
  Reserving size (115804) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48422 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48423 for bucket 5
Getting block 6 of 8
  Reserving size (115804) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 98003 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 98004 for bucket 6
Getting block 7 of 8
  Reserving size (115804) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 56703 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 56704 for bucket 7
Getting block 8 of 8
  Reserving size (115804) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 105478 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 105479 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 175475
fchr[G]: 288127
fchr[T]: 414618
fchr[$]: 617620
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4407747 bytes to primary EBWT file: ./index/./genomic_seq.fa_index.rev.1.bt2.tmp
Wrote 154412 bytes to secondary EBWT file: ./index/./genomic_seq.fa_index.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 617620
    bwtLen: 617621
    sz: 154405
    bwtSz: 154406
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 38602
    offsSz: 154408
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3217
    numLines: 3217
    ebwtTotLen: 205888
    ebwtTotSz: 205888
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Renaming ./index/./genomic_seq.fa_index.3.bt2.tmp to ./index/./genomic_seq.fa_index.3.bt2
Renaming ./index/./genomic_seq.fa_index.4.bt2.tmp to ./index/./genomic_seq.fa_index.4.bt2
Renaming ./index/./genomic_seq.fa_index.1.bt2.tmp to ./index/./genomic_seq.fa_index.1.bt2
Renaming ./index/./genomic_seq.fa_index.2.bt2.tmp to ./index/./genomic_seq.fa_index.2.bt2
Renaming ./index/./genomic_seq.fa_index.rev.1.bt2.tmp to ./index/./genomic_seq.fa_index.rev.1.bt2
Renaming ./index/./genomic_seq.fa_index.rev.2.bt2.tmp to ./index/./genomic_seq.fa_index.rev.2.bt2
587 reads; of these:
  587 (100.00%) were unpaired; of these:
    256 (43.61%) aligned 0 times
    146 (24.87%) aligned exactly 1 time
    185 (31.52%) aligned >1 times
56.39% overall alignment rate
**Creating index of cDNA/genomic sequences:./index/./genomic_seq.fa_index
**
Predicting targets for frag:./genomic_seq.fa using index:./index/./genomic_seq.fa_index
You chose 'Heuristic mode' for target identification

 miRNAs mapped to Fragment: ./genomic_seq.fa
Target Prediction time: 6.18

****************************************
Target files: ['genomic_seq.targ']

Combining all the target prediction files for parsing and scoring

genomic_seq.targ

**Target prediction results are being generated**
File for parsing: './predicted/All.targs' in predicted folder

Total number of interactions from 'miRferno':1129 AND total interactions scored: 1121


Target prediction time is 6.32


These are index files:  ['genomic_seq.fa_index.1.bt2']


PARE processing run time is 0.0




Indexing and Prediction run time is 0.0


The complete 'sPARTA' run time is 10.14 seconds
The run has completed sucessfully.....CHEERS! - Exiting..

[Sun Jan 21 23:50:44 2024]
Finished job 2954.
83 of 1007 steps (8%) done
Select jobs to execute...

[Sun Jan 21 23:50:44 2024]
rule endCutSparta_sh:
    input: /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutShuffleSpartaDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endCutSpartaStartTimeDone.txt, /home/ec2-user/nanoPAREUpdate/nanoPareVT1/endMaskSpartaDone.txt, /home/ec2-user/meyersData/shuffleDirSparta_1/anno.mir.tas.335.shuffled.fa_clean_revcomp.fa_clean_revcomp.fa
    output: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.335.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    jobid: 2888
    reason: Missing output files: /home/ec2-user/meyersData/transcript_bedgraph_capmasked_sparta1/anno.mir.tas.335.shuffled.fa_clean_revcomp.fa_clean_revcomp.pred.sites.bed
    wildcards: miRShuffled=anno.mir.tas.335.shuffled.fa_clean_revcomp.fa_clean_revcomp
    threads: 2
    resources: tmpdir=/tmp

/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:207: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isNumpy     = importlib.find_loader('numpy')
/home/ec2-user/nanoPAREUpdate/sPARTA/sPARTA.py:215: DeprecationWarning: Deprecated since Python 3.4 and slated for removal in Python 3.12; use importlib.util.find_spec() instead
  isScipy     = importlib.find_loader('scipy')
slurmstepd: error: *** JOB 11 ON queue1-dy-t3micro-1 CANCELLED AT 2024-01-21T23:50:47 ***
